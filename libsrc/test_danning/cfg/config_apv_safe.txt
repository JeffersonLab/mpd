
version = "0.35";  // mandatory
logfile = "out/Daq.log"; // mandatory
loglevel = 4;	// 0=none, 1=normal, 2=debug, 3=verbose, 4=very verbose ...
date = "28/03/2012"; // date format: DD/MM/YYYY
time = "12:00:00";   // time format: hh:mm:ss

// @includeDir ...

@include "cfg/config_apv_default.txt"

bus: // interface to the MPD
(
  {
  controller = "gexvb"; // v1718, v2718, sis3104, eth, fiber 

  mpd:
  ( // list of mpds
   
    // --- mpd 0
    {
     // rotary = 17; // rotary switch setting
      rotary = 0; // for ssp 

      zero_level = 500; // zero logic level
      one_level = 1900;  // one logic level: above this adc value signal is assumed to be a digital "one"

      fir_enable= 0;
      fir_coeff = [10990, -2130, -169, -232, -147, -123, -98, -191, -88, 333, -3, 34, 17, 14, 11, 7]; // FIR filter coefficients 16bits (/2^13 to get "real" values)

    i2c: // I2C section, configuration
      {
        speed = 100;//speed = 1124; // (x10^-5 s) period of the i2c clock
        timeout = 2500; // number of retries before timeout
      };
    adc:
      (
	{
          gain = [5, 5, 5, 5, 5, 5, 5, 5];	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none";  // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between
                             // adc-clock and apv-clock
        },
        {
          gain = [5, 5, 5, 5, 5, 5, 5, 5]; 	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none"; // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between adc-clock and apv-clock //
        }
      );
    apv:
      (
//	{ adc = 15; i2c = 1; }, 
//	{ adc = 14; i2c = 2; }, 
//	{ adc = 13; i2c = 3; }

//	{ adc = 13; i2c = 4; }, 
//	{ adc = 12; i2c = 5; },
//	{ adc = 11; i2c = 6; },
//	{ adc = 10; i2c = 7; },

//	{ adc = 8; i2c =8; },
//	{ adc = 7; i2c =9; },
//	{ adc = 6; i2c = 10; },
//	{ adc = 5; i2c = 11; },

//	{ adc = 4; i2c = 0; },
//	{ adc = 3; i2c = 1; },
	{ adc = 2; i2c = 2; },
	{ adc = 1; i2c = 3; }
//	{ adc = 0; i2c = 15; }
//
      );
    }/*,
    //end MPD 0
         
    // --- mpd 1
    {
      rotary = 4; // rotary switch setting

      zero_level = 500; // zero logic level
      one_level = 1900;  // one logic level: above this adc value signal is assumed to be a digital "one"

      fir_enable= 0;
      fir_coeff = [10990, -2130, -169, -232, -147, -123, -98, -191, -88, 333, -3, 34, 17, 14, 11, 7]; // FIR filter coefficients 16bits (/2^13 to get "real" values)
    i2c: // I2C section, configuration
      {
        speed = 1124; // (x10^-5 s) period of the i2c clock
        timeout = 2500; // number of retries before timeout
      };
    adc:
	(
	{
          gain = [5, 5, 5, 5, 5, 5, 5, 5];	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none";  // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between
                             // adc-clock and apv-clock
        },
        {
          gain = [5, 5, 5, 5, 5, 5, 5, 5]; 	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none"; // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between adc-clock and apv-clock //
        }
    );
    apv:
    (
	{ adc = 4; i2c = 0; }, 
        { adc = 3; i2c = 1; },
        { adc = 2; i2c = 2; },
        { adc = 1; i2c = 3; },
        { adc = 0; i2c = 4; },

        { adc = 9; i2c = 8; },
        { adc = 8; i2c = 9; },
        { adc = 7; i2c = 10; },
        { adc = 6; i2c = 11; },
	{ adc = 5; i2c = 12; }
    
    );
    }//,//end MPD 1
    
       // --- mpd 2
    {
      rotary = 5; // rotary switch setting

      zero_level = 500; // zero logic level
      one_level = 1900;  // one logic level: above this adc value signal is assumed to be a digital "one"

    i2c: // I2C section, configuration
      {
        speed = 1124; // (x10^-5 s) period of the i2c clock
        timeout = 2500; // number of retries before timeout
      };
    adc:
	(
	{
          gain = [5, 5, 5, 5, 5, 5, 5, 5];	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none";  // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between
                             // adc-clock and apv-clock
        },
        {
          gain = [5, 5, 5, 5, 5, 5, 5, 5]; 	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none"; // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between adc-clock and apv-clock //
        }
    );
    apv:
    (
     //{ adc = 4; i2c = 0; }, 
	// { adc = 3; i2c = 1; },
     // { adc = 2; i2c = 2; }//,
	//{ adc = 1; i2c = 3; },
	//   { adc = 9; i2c = 8; },
        //{ adc = 8; i2c = 9; },
     // { adc = 0; i2c = 11; }//,
	// { adc = 6; i2c = 11; }//,
	//  { adc = 11; i2c = 17; },
        //{ adc = 12; i2c = 18; },
        //{ adc = 13; i2c = 19; },
        //{ adc = 14; i2c = 20; }
    );
    }*/
/*,//end MPD 2
    

    // --- mpd 3
    {
      rotary = 6; // rotary switch setting

      zero_level = 500; // zero logic level
      one_level = 1900;  // one logic level: above this adc value signal is assumed to be a digital "one"

    i2c: // I2C section, configuration
      {
        speed = 1124; // (x10^-5 s) period of the i2c clock
        timeout = 2500; // number of retries before timeout
      };
    adc:
	(
	{
          gain = [5, 5, 5, 5, 5, 5, 5, 5];	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none";  // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between
                             // adc-clock and apv-clock
        },
        {
          gain = [5, 5, 5, 5, 5, 5, 5, 5]; 	// (0...12 dB) gain settings for
                                            // sub-ch 0, 1, 2, ... 7
          invert = true;
          pattern = "none"; // none, sync, deskew, ramp
          clock_phase = 23;	 // 0..63 (0.5 ns step) time offset between adc-clock and apv-clock //
        }
    );
    apv:
    (
        { adc = 0; i2c = 0; }, 
        { adc = 1; i2c = 1; },
        { adc = 2; i2c = 2; },
        { adc = 3; i2c = 3; },
        { adc = 4; i2c = 4; },
        { adc = 5; i2c = 8; },
        { adc = 6; i2c = 9; }
        { adc = 7; i2c = 10; },
        { adc = 8; i2c = 11; },
        { adc = 9; i2c = 12; },
        { adc = 10; i2c = 16; },
        { adc = 11; i2c = 17; },
        { adc = 12; i2c = 18; },
        { adc = 13; i2c = 19; },
        { adc = 14; i2c = 20; }
    );
    }//end MPD 3

     */
 
    ); // end MPDs

  user: // user specific setting (e.g. additional vme module in bus)
  {
    ioreg: {
      model = "v513";
      pulse_on = -1;  // set to 11 if you want ioreg to generate the pedestal pulse, or -1 for real trigger 
      pulse_period = 1000; // minimum microseconds between pulses
    }; // input/output register (veto et al)
  };

}); // end buses


// run parameters
run:
{

  file_prefix = "out/test"; // OUTPUT FILENAME prefix

  mode = "event";	// sync, event, histo, sample, process , in mpd ?
  format = "bin";	// hex, dec, bin
  histo_time = 1;  // second of acquisition for histogramming
  histo_channel_start = 0;	// 0 .. 7
  histo_channel_stop = 7;	// 0 .. 7
  histo_board_start = 0;	// 0 .. 20
  histo_board_stop = 0;	// 0 .. 20

  progress_step = 22;
  time_preset = 600;	// CHANGE ACQUISITION TIME
  event_preset = 5;	// CHANGE NUMBER OF ACQUIRED EVENTS
  max_retry =500;	// 0 = disabled
  info = "Info setting"; // comment on the run
};
